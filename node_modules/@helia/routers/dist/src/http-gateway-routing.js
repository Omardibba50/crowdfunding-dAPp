import { peerIdSymbol } from '@libp2p/interface';
import { uriToMultiaddr } from '@multiformats/uri-to-multiaddr';
import { CID } from 'multiformats/cid';
import { identity } from 'multiformats/hashes/identity';
import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';
import { toString as uint8ArrayToString } from 'uint8arrays/to-string';
export const DEFAULT_TRUSTLESS_GATEWAYS = [
    // 2023-10-03: IPNS, Origin, and Block/CAR support from https://ipfs-public-gateway-checker.on.fleek.co/
    'https://trustless-gateway.link',
    // 2023-10-03: IPNS, Origin, and Block/CAR support from https://ipfs-public-gateway-checker.on.fleek.co/
    'https://4everland.io'
];
// these values are from https://github.com/multiformats/multicodec/blob/master/table.csv
const TRANSPORT_IPFS_GATEWAY_HTTP_CODE = 0x0920;
const inspect = Symbol.for('nodejs.util.inspect.custom');
class URLPeerId {
    type = 'url';
    multihash;
    privateKey;
    publicKey;
    url;
    constructor(url) {
        this.url = url.toString();
        this.multihash = identity.digest(uint8ArrayFromString(this.url));
    }
    [inspect]() {
        return `PeerId(${this.url})`;
    }
    [peerIdSymbol] = true;
    toString() {
        return this.toCID().toString();
    }
    toCID() {
        return CID.createV1(TRANSPORT_IPFS_GATEWAY_HTTP_CODE, this.multihash);
    }
    toBytes() {
        return this.toCID().bytes;
    }
    equals(other) {
        if (other == null) {
            return false;
        }
        if (other instanceof Uint8Array) {
            other = uint8ArrayToString(other);
        }
        return other.toString() === this.toString();
    }
}
function toPeerInfo(url) {
    url = url.toString();
    return {
        id: new URLPeerId(new URL(url)),
        multiaddrs: [
            uriToMultiaddr(url)
        ]
    };
}
class HTTPGatwayRouter {
    gateways;
    constructor(init = {}) {
        this.gateways = (init.gateways ?? DEFAULT_TRUSTLESS_GATEWAYS).map(url => toPeerInfo(url));
    }
    async *findProviders(cid, options) {
        yield* this.gateways.toSorted(() => Math.random() > 0.5 ? 1 : -1).map(info => ({
            ...info,
            protocols: ['transport-ipfs-gateway-http']
        }));
    }
}
/**
 * Returns a static list of HTTP Gateways as providers
 */
export function httpGatewayRouting(init = {}) {
    return new HTTPGatwayRouter(init);
}
//# sourceMappingURL=http-gateway-routing.js.map