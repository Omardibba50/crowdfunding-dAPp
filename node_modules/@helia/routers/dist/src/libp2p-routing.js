class Libp2pRouter {
    libp2p;
    constructor(libp2p) {
        this.libp2p = libp2p;
    }
    async provide(cid, options) {
        await this.libp2p.contentRouting.provide(cid, options);
    }
    async *findProviders(cid, options) {
        yield* this.libp2p.contentRouting.findProviders(cid, options);
    }
    async put(key, value, options) {
        await this.libp2p.contentRouting.put(key, value, options);
    }
    async get(key, options) {
        return this.libp2p.contentRouting.get(key, options);
    }
    async findPeer(peerId, options) {
        return this.libp2p.peerRouting.findPeer(peerId, options);
    }
    async *getClosestPeers(key, options) {
        yield* this.libp2p.peerRouting.getClosestPeers(key, options);
    }
}
export function libp2pRouting(libp2p) {
    return new Libp2pRouter(libp2p);
}
//# sourceMappingURL=libp2p-routing.js.map