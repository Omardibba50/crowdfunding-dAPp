import { contentRoutingSymbol, peerRoutingSymbol } from '@libp2p/interface';
import { type IPNSRecord } from 'ipns';
import type { DelegatedRoutingV1HttpApiClient, DelegatedRoutingV1HttpApiClientInit, GetIPNSOptions, PeerRecord } from './index.js';
import type { ContentRouting, PeerRouting, AbortOptions, PeerId } from '@libp2p/interface';
import type { CID } from 'multiformats';
export declare class DefaultDelegatedRoutingV1HttpApiClient implements DelegatedRoutingV1HttpApiClient {
    #private;
    private started;
    private readonly httpQueue;
    private readonly shutDownController;
    private readonly clientUrl;
    private readonly timeout;
    private readonly contentRouting;
    private readonly peerRouting;
    /**
     * Create a new DelegatedContentRouting instance
     */
    constructor(url: string | URL, init?: DelegatedRoutingV1HttpApiClientInit);
    get [contentRoutingSymbol](): ContentRouting;
    get [peerRoutingSymbol](): PeerRouting;
    isStarted(): boolean;
    start(): void;
    stop(): void;
    getProviders(cid: CID, options?: AbortOptions): AsyncGenerator<PeerRecord>;
    getPeers(peerId: PeerId, options?: AbortOptions | undefined): AsyncGenerator<PeerRecord>;
    getIPNS(peerId: PeerId, options?: GetIPNSOptions): Promise<IPNSRecord>;
    putIPNS(peerId: PeerId, record: IPNSRecord, options?: AbortOptions): Promise<void>;
}
//# sourceMappingURL=client.d.ts.map