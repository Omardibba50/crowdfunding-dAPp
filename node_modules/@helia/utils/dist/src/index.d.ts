/**
 * @packageDocumentation
 *
 * Exports a `Helia` class that implements the {@link HeliaInterface} API.
 *
 * In general you should use the `helia` or `@helia/http` modules instead which
 * pre-configure Helia for certain use-cases (p2p or pure-HTTP).
 *
 * @example
 *
 * ```typescript
 * import { Helia } from '@helia/utils'
 *
 * const node = new Helia({
 *   // ...options
 * })
 * ```
 */
import { BlockStorage } from './storage.js';
import type { DAGWalker, GCOptions, Helia as HeliaInterface, Routing } from '@helia/interface';
import type { BlockBroker } from '@helia/interface/blocks';
import type { Pins } from '@helia/interface/pins';
import type { ComponentLogger, Metrics } from '@libp2p/interface';
import type { DNS } from '@multiformats/dns';
import type { Blockstore } from 'interface-blockstore';
import type { Datastore } from 'interface-datastore';
import type { MultihashHasher } from 'multiformats/hashes/interface';
export { AbstractSession, type AbstractCreateSessionOptions } from './abstract-session.js';
export { BloomFilter } from './bloom-filter.js';
/**
 * Options used to create a Helia node.
 */
export interface HeliaInit {
    /**
     * The blockstore is where blocks are stored
     */
    blockstore: Blockstore;
    /**
     * The datastore is where data is stored
     */
    datastore: Datastore;
    /**
     * By default sha256, sha512 and identity hashes are supported for
     * bitswap operations. To bitswap blocks with CIDs using other hashes
     * pass appropriate MultihashHashers here.
     */
    hashers?: MultihashHasher[];
    /**
     * In order to pin CIDs that correspond to a DAG, it's necessary to know
     * how to traverse that DAG.  DAGWalkers take a block and yield any CIDs
     * encoded within that block.
     */
    dagWalkers?: DAGWalker[];
    /**
     * A list of strategies used to fetch blocks when they are not present in
     * the local blockstore
     */
    blockBrokers: Array<(components: any) => BlockBroker>;
    /**
     * Garbage collection requires preventing blockstore writes during searches
     * for unpinned blocks as DAGs are typically pinned after they've been
     * imported - without locking this could lead to the deletion of blocks while
     * they are being added to the blockstore.
     *
     * By default this lock is held on the current process and other processes
     * will contact this process for access.
     *
     * If Helia is being run in multiple processes, one process must hold the GC
     * lock so use this option to control which process that is.
     *
     * @default true
     */
    holdGcLock?: boolean;
    /**
     * An optional logging component to pass to libp2p. If not specified the
     * default implementation from libp2p will be used.
     */
    logger?: ComponentLogger;
    /**
     * Routers perform operations such as looking up content providers,
     * information about network peers or getting/putting records.
     */
    routers?: Array<Partial<Routing>>;
    /**
     * During provider lookups, peers can be returned from routing implementations
     * with no multiaddrs.
     *
     * This can happen when they've been retrieved from network peers that only
     * store multiaddrs for a limited amount of time.
     *
     * When this happens the peer's info has to be looked up with a further query.
     *
     * To not have this query block the yielding of other providers returned with
     * multiaddrs, a separate queue is used to perform this lookup.
     *
     * This config value controls the concurrency of that queue.
     *
     * @default 5
     */
    providerLookupConcurrency?: number;
    /**
     * Components used by subclasses
     */
    components?: Record<string, any>;
    /**
     * An optional DNS implementation used to perform queries for DNS records.
     */
    dns?: DNS;
    /**
     * A metrics object that can be used to collected arbitrary stats about node
     * usage.
     */
    metrics?: Metrics;
}
export declare class Helia implements HeliaInterface {
    blockstore: BlockStorage;
    datastore: Datastore;
    pins: Pins;
    logger: ComponentLogger;
    routing: Routing;
    dagWalkers: Record<number, DAGWalker>;
    hashers: Record<number, MultihashHasher>;
    dns: DNS;
    metrics?: Metrics;
    private readonly log;
    constructor(init: HeliaInit);
    start(): Promise<void>;
    stop(): Promise<void>;
    gc(options?: GCOptions): Promise<void>;
}
//# sourceMappingURL=index.d.ts.map