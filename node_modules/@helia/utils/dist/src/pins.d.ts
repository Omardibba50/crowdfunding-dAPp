import { type Datastore } from 'interface-datastore';
import { CID, type Version } from 'multiformats/cid';
import type { DAGWalker } from '@helia/interface';
import type { AddOptions, IsPinnedOptions, LsOptions, Pin, Pins, RmOptions } from '@helia/interface/pins';
import type { Blockstore } from 'interface-blockstore';
export declare class PinsImpl implements Pins {
    #private;
    private readonly datastore;
    private readonly blockstore;
    private readonly dagWalkers;
    constructor(datastore: Datastore, blockstore: Blockstore, dagWalkers: Record<number, DAGWalker>);
    add(cid: CID<unknown, number, number, Version>, options?: AddOptions): AsyncGenerator<CID, void, undefined>;
    rm(cid: CID<unknown, number, number, Version>, options?: RmOptions): AsyncGenerator<CID, void, undefined>;
    ls(options?: LsOptions): AsyncGenerator<Pin, void, undefined>;
    isPinned(cid: CID, options?: IsPinnedOptions): Promise<boolean>;
}
//# sourceMappingURL=pins.d.ts.map