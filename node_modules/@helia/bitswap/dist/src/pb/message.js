/* eslint-disable import/export */
/* eslint-disable complexity */
/* eslint-disable @typescript-eslint/no-namespace */
/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { CodeError, decodeMessage, encodeMessage, enumeration, message } from 'protons-runtime';
import { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc';
export var WantType;
(function (WantType) {
    WantType["WantBlock"] = "WantBlock";
    WantType["WantHave"] = "WantHave";
})(WantType || (WantType = {}));
var __WantTypeValues;
(function (__WantTypeValues) {
    __WantTypeValues[__WantTypeValues["WantBlock"] = 0] = "WantBlock";
    __WantTypeValues[__WantTypeValues["WantHave"] = 1] = "WantHave";
})(__WantTypeValues || (__WantTypeValues = {}));
(function (WantType) {
    WantType.codec = () => {
        return enumeration(__WantTypeValues);
    };
})(WantType || (WantType = {}));
export var WantlistEntry;
(function (WantlistEntry) {
    let _codec;
    WantlistEntry.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if ((obj.cid != null && obj.cid.byteLength > 0)) {
                    w.uint32(10);
                    w.bytes(obj.cid);
                }
                if ((obj.priority != null && obj.priority !== 0)) {
                    w.uint32(16);
                    w.int32(obj.priority);
                }
                if (obj.cancel != null) {
                    w.uint32(24);
                    w.bool(obj.cancel);
                }
                if (obj.wantType != null) {
                    w.uint32(32);
                    WantType.codec().encode(obj.wantType, w);
                }
                if (obj.sendDontHave != null) {
                    w.uint32(40);
                    w.bool(obj.sendDontHave);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length, opts = {}) => {
                const obj = {
                    cid: uint8ArrayAlloc(0),
                    priority: 0
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1: {
                            obj.cid = reader.bytes();
                            break;
                        }
                        case 2: {
                            obj.priority = reader.int32();
                            break;
                        }
                        case 3: {
                            obj.cancel = reader.bool();
                            break;
                        }
                        case 4: {
                            obj.wantType = WantType.codec().decode(reader);
                            break;
                        }
                        case 5: {
                            obj.sendDontHave = reader.bool();
                            break;
                        }
                        default: {
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    WantlistEntry.encode = (obj) => {
        return encodeMessage(obj, WantlistEntry.codec());
    };
    WantlistEntry.decode = (buf, opts) => {
        return decodeMessage(buf, WantlistEntry.codec(), opts);
    };
})(WantlistEntry || (WantlistEntry = {}));
export var Wantlist;
(function (Wantlist) {
    let _codec;
    Wantlist.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.entries != null) {
                    for (const value of obj.entries) {
                        w.uint32(10);
                        WantlistEntry.codec().encode(value, w);
                    }
                }
                if (obj.full != null) {
                    w.uint32(16);
                    w.bool(obj.full);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length, opts = {}) => {
                const obj = {
                    entries: []
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1: {
                            if (opts.limits?.entries != null && obj.entries.length === opts.limits.entries) {
                                throw new CodeError('decode error - map field "entries" had too many elements', 'ERR_MAX_LENGTH');
                            }
                            obj.entries.push(WantlistEntry.codec().decode(reader, reader.uint32(), {
                                limits: opts.limits?.entries$
                            }));
                            break;
                        }
                        case 2: {
                            obj.full = reader.bool();
                            break;
                        }
                        default: {
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    Wantlist.encode = (obj) => {
        return encodeMessage(obj, Wantlist.codec());
    };
    Wantlist.decode = (buf, opts) => {
        return decodeMessage(buf, Wantlist.codec(), opts);
    };
})(Wantlist || (Wantlist = {}));
export var Block;
(function (Block) {
    let _codec;
    Block.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if ((obj.prefix != null && obj.prefix.byteLength > 0)) {
                    w.uint32(10);
                    w.bytes(obj.prefix);
                }
                if ((obj.data != null && obj.data.byteLength > 0)) {
                    w.uint32(18);
                    w.bytes(obj.data);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length, opts = {}) => {
                const obj = {
                    prefix: uint8ArrayAlloc(0),
                    data: uint8ArrayAlloc(0)
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1: {
                            obj.prefix = reader.bytes();
                            break;
                        }
                        case 2: {
                            obj.data = reader.bytes();
                            break;
                        }
                        default: {
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    Block.encode = (obj) => {
        return encodeMessage(obj, Block.codec());
    };
    Block.decode = (buf, opts) => {
        return decodeMessage(buf, Block.codec(), opts);
    };
})(Block || (Block = {}));
export var BlockPresenceType;
(function (BlockPresenceType) {
    BlockPresenceType["HaveBlock"] = "HaveBlock";
    BlockPresenceType["DontHaveBlock"] = "DontHaveBlock";
})(BlockPresenceType || (BlockPresenceType = {}));
var __BlockPresenceTypeValues;
(function (__BlockPresenceTypeValues) {
    __BlockPresenceTypeValues[__BlockPresenceTypeValues["HaveBlock"] = 0] = "HaveBlock";
    __BlockPresenceTypeValues[__BlockPresenceTypeValues["DontHaveBlock"] = 1] = "DontHaveBlock";
})(__BlockPresenceTypeValues || (__BlockPresenceTypeValues = {}));
(function (BlockPresenceType) {
    BlockPresenceType.codec = () => {
        return enumeration(__BlockPresenceTypeValues);
    };
})(BlockPresenceType || (BlockPresenceType = {}));
export var BlockPresence;
(function (BlockPresence) {
    let _codec;
    BlockPresence.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if ((obj.cid != null && obj.cid.byteLength > 0)) {
                    w.uint32(10);
                    w.bytes(obj.cid);
                }
                if (obj.type != null && __BlockPresenceTypeValues[obj.type] !== 0) {
                    w.uint32(16);
                    BlockPresenceType.codec().encode(obj.type, w);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length, opts = {}) => {
                const obj = {
                    cid: uint8ArrayAlloc(0),
                    type: BlockPresenceType.HaveBlock
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1: {
                            obj.cid = reader.bytes();
                            break;
                        }
                        case 2: {
                            obj.type = BlockPresenceType.codec().decode(reader);
                            break;
                        }
                        default: {
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    BlockPresence.encode = (obj) => {
        return encodeMessage(obj, BlockPresence.codec());
    };
    BlockPresence.decode = (buf, opts) => {
        return decodeMessage(buf, BlockPresence.codec(), opts);
    };
})(BlockPresence || (BlockPresence = {}));
export var BitswapMessage;
(function (BitswapMessage) {
    let _codec;
    BitswapMessage.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.wantlist != null) {
                    w.uint32(10);
                    Wantlist.codec().encode(obj.wantlist, w);
                }
                if (obj.blocks != null) {
                    for (const value of obj.blocks) {
                        w.uint32(26);
                        Block.codec().encode(value, w);
                    }
                }
                if (obj.blockPresences != null) {
                    for (const value of obj.blockPresences) {
                        w.uint32(34);
                        BlockPresence.codec().encode(value, w);
                    }
                }
                if ((obj.pendingBytes != null && obj.pendingBytes !== 0)) {
                    w.uint32(40);
                    w.int32(obj.pendingBytes);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length, opts = {}) => {
                const obj = {
                    blocks: [],
                    blockPresences: [],
                    pendingBytes: 0
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1: {
                            obj.wantlist = Wantlist.codec().decode(reader, reader.uint32(), {
                                limits: opts.limits?.wantlist
                            });
                            break;
                        }
                        case 3: {
                            if (opts.limits?.blocks != null && obj.blocks.length === opts.limits.blocks) {
                                throw new CodeError('decode error - map field "blocks" had too many elements', 'ERR_MAX_LENGTH');
                            }
                            obj.blocks.push(Block.codec().decode(reader, reader.uint32(), {
                                limits: opts.limits?.blocks$
                            }));
                            break;
                        }
                        case 4: {
                            if (opts.limits?.blockPresences != null && obj.blockPresences.length === opts.limits.blockPresences) {
                                throw new CodeError('decode error - map field "blockPresences" had too many elements', 'ERR_MAX_LENGTH');
                            }
                            obj.blockPresences.push(BlockPresence.codec().decode(reader, reader.uint32(), {
                                limits: opts.limits?.blockPresences$
                            }));
                            break;
                        }
                        case 5: {
                            obj.pendingBytes = reader.int32();
                            break;
                        }
                        default: {
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    BitswapMessage.encode = (obj) => {
        return encodeMessage(obj, BitswapMessage.codec());
    };
    BitswapMessage.decode = (buf, opts) => {
        return decodeMessage(buf, BitswapMessage.codec(), opts);
    };
})(BitswapMessage || (BitswapMessage = {}));
//# sourceMappingURL=message.js.map