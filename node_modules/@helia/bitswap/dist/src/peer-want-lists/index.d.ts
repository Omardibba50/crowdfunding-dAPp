import { CID } from 'multiformats/cid';
import { Ledger } from './ledger.js';
import type { BitswapNotifyProgressEvents, WantListEntry } from '../index.js';
import type { Network } from '../network.js';
import type { BitswapMessage } from '../pb/message.js';
import type { ComponentLogger, Libp2p, Metrics, PeerId } from '@libp2p/interface';
import type { PeerMap } from '@libp2p/peer-collections';
import type { Blockstore } from 'interface-blockstore';
import type { AbortOptions } from 'it-length-prefixed-stream';
import type { ProgressOptions } from 'progress-events';
export interface PeerWantListsInit {
    maxSizeReplaceHasWithBlock?: number;
}
export interface PeerWantListsComponents {
    blockstore: Blockstore;
    network: Network;
    libp2p: Libp2p;
    logger: ComponentLogger;
    metrics?: Metrics;
}
export interface PeerLedger {
    peer: PeerId;
    value: number;
    sent: number;
    received: number;
    exchanged: number;
}
export declare class PeerWantLists {
    blockstore: Blockstore;
    network: Network;
    readonly ledgerMap: PeerMap<Ledger>;
    private readonly maxSizeReplaceHasWithBlock?;
    private readonly log;
    private readonly logger;
    constructor(components: PeerWantListsComponents, init?: PeerWantListsInit);
    ledgerForPeer(peerId: PeerId): PeerLedger | undefined;
    wantListForPeer(peerId: PeerId): WantListEntry[] | undefined;
    peers(): PeerId[];
    /**
     * Handle incoming messages
     */
    receiveMessage(peerId: PeerId, message: BitswapMessage): Promise<void>;
    receivedBlock(cid: CID, options: ProgressOptions<BitswapNotifyProgressEvents> & AbortOptions): Promise<void>;
    peerDisconnected(peerId: PeerId): void;
}
//# sourceMappingURL=index.d.ts.map