import { Network } from './network.js';
import { PeerWantLists } from './peer-want-lists/index.js';
import { Stats } from './stats.js';
import { WantList } from './want-list.js';
import type { BitswapOptions, Bitswap as BitswapInterface, BitswapWantProgressEvents, BitswapNotifyProgressEvents, WantListEntry, BitswapComponents } from './index.js';
import type { BlockBroker, CreateSessionOptions } from '@helia/interface';
import type { PeerId } from '@libp2p/interface';
import type { AbortOptions } from '@multiformats/multiaddr';
import type { Blockstore } from 'interface-blockstore';
import type { CID } from 'multiformats/cid';
import type { ProgressOptions } from 'progress-events';
export interface WantOptions extends AbortOptions, ProgressOptions<BitswapWantProgressEvents> {
    /**
     * When searching the routing for providers, stop searching after finding this
     * many providers.
     *
     * @default 3
     */
    maxProviders?: number;
}
/**
 * JavaScript implementation of the Bitswap 'data exchange' protocol
 * used by IPFS.
 */
export declare class Bitswap implements BitswapInterface {
    private readonly log;
    private readonly logger;
    readonly stats: Stats;
    network: Network;
    blockstore: Blockstore;
    peerWantLists: PeerWantLists;
    wantList: WantList;
    constructor(components: BitswapComponents, init?: BitswapOptions);
    createSession(options?: CreateSessionOptions): Required<Pick<BlockBroker<BitswapWantProgressEvents>, 'retrieve'>>;
    want(cid: CID, options?: WantOptions): Promise<Uint8Array>;
    /**
     * Sends notifications about the arrival of a block
     */
    notify(cid: CID, block: Uint8Array, options?: ProgressOptions<BitswapNotifyProgressEvents> & AbortOptions): Promise<void>;
    getWantlist(): WantListEntry[];
    getPeerWantlist(peer: PeerId): WantListEntry[] | undefined;
    /**
     * Start the bitswap node
     */
    start(): Promise<void>;
    /**
     * Stop the bitswap node
     */
    stop(): Promise<void>;
}
//# sourceMappingURL=bitswap.d.ts.map