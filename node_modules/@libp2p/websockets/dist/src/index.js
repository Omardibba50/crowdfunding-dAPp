/**
 * @packageDocumentation
 *
 * A [libp2p transport](https://docs.libp2p.io/concepts/transports/overview/) based on [WebSockets](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API).
 *
 * @example
 *
 * ```TypeScript
 * import { createLibp2p } from 'libp2p'
 * import { webSockets } from '@libp2p/websockets'
 * import { multiaddr } from '@multiformats/multiaddr'
 *
 * const node = await createLibp2p({
 *   transports: [
 *     webSockets()
 *   ]
 * //... other config
 * })
 * await node.start()
 *
 * const ma = multiaddr('/ip4/127.0.0.1/tcp/9090/ws')
 * await node.dial(ma)
 * ```
 *
 * ## Filters
 *
 * When run in a browser by default this module will only connect to secure web socket addresses.
 *
 * To change this you should pass a filter to the factory function.
 *
 * You can create your own address filters for this transports, or rely in the filters [provided](./src/filters.js).
 *
 * The available filters are:
 *
 * - `filters.all`
 *   - Returns all TCP and DNS based addresses, both with `ws` or `wss`.
 * - `filters.dnsWss`
 *   - Returns all DNS based addresses with `wss`.
 * - `filters.dnsWsOrWss`
 *   - Returns all DNS based addresses, both with `ws` or `wss`.
 *
 * @example Allow dialing insecure WebSockets
 *
 * ```TypeScript
 * import { createLibp2p } from 'libp2p'
 * import { webSockets } from '@libp2p/websockets'
 * import * as filters from '@libp2p/websockets/filters'
 *
 * const node = await createLibp2p({
 *   transports: [
 *     webSockets({
 *       // connect to all sockets, even insecure ones
 *       filter: filters.all
 *     })
 *   ]
 * })
 * ```
 */
import { CodeError, transportSymbol, serviceCapabilities } from '@libp2p/interface';
import { multiaddrToUri as toUri } from '@multiformats/multiaddr-to-uri';
import { connect } from 'it-ws/client';
import pDefer from 'p-defer';
import { CustomProgressEvent } from 'progress-events';
import { raceSignal } from 'race-signal';
import { isBrowser, isWebWorker } from 'wherearewe';
import * as filters from './filters.js';
import { createListener } from './listener.js';
import { socketToMaConn } from './socket-to-conn.js';
class WebSockets {
    log;
    init;
    logger;
    constructor(components, init) {
        this.log = components.logger.forComponent('libp2p:websockets');
        this.logger = components.logger;
        this.init = init;
    }
    [transportSymbol] = true;
    [Symbol.toStringTag] = '@libp2p/websockets';
    [serviceCapabilities] = [
        '@libp2p/transport'
    ];
    async dial(ma, options) {
        this.log('dialing %s', ma);
        options = options ?? {};
        const socket = await this._connect(ma, options);
        const maConn = socketToMaConn(socket, ma, {
            logger: this.logger
        });
        this.log('new outbound connection %s', maConn.remoteAddr);
        const conn = await options.upgrader.upgradeOutbound(maConn, options);
        this.log('outbound connection %s upgraded', maConn.remoteAddr);
        return conn;
    }
    async _connect(ma, options) {
        options?.signal?.throwIfAborted();
        const cOpts = ma.toOptions();
        this.log('dialing %s:%s', cOpts.host, cOpts.port);
        const errorPromise = pDefer();
        const rawSocket = connect(toUri(ma), this.init);
        rawSocket.socket.addEventListener('error', () => {
            // the WebSocket.ErrorEvent type doesn't actually give us any useful
            // information about what happened
            // https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/error_event
            const err = new CodeError(`Could not connect to ${ma.toString()}`, 'ERR_CONNECTION_FAILED');
            this.log.error('connection error:', err);
            errorPromise.reject(err);
        });
        try {
            options.onProgress?.(new CustomProgressEvent('websockets:open-connection'));
            await raceSignal(Promise.race([rawSocket.connected(), errorPromise.promise]), options.signal);
        }
        catch (err) {
            rawSocket.close()
                .catch(err => {
                this.log.error('error closing raw socket', err);
            });
            throw err;
        }
        this.log('connected %s', ma);
        return rawSocket;
    }
    /**
     * Creates a Websockets listener. The provided `handler` function will be called
     * anytime a new incoming Connection has been successfully upgraded via
     * `upgrader.upgradeInbound`
     */
    createListener(options) {
        return createListener({
            logger: this.logger
        }, {
            ...this.init,
            ...options
        });
    }
    /**
     * Takes a list of `Multiaddr`s and returns only valid Websockets addresses.
     * By default, in a browser environment only DNS+WSS multiaddr is accepted,
     * while in a Node.js environment DNS+{WS, WSS} multiaddrs are accepted.
     */
    listenFilter(multiaddrs) {
        multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];
        if (this.init?.filter != null) {
            return this.init?.filter(multiaddrs);
        }
        // Browser
        if (isBrowser || isWebWorker) {
            return filters.wss(multiaddrs);
        }
        return filters.all(multiaddrs);
    }
    /**
     * Filter check for all Multiaddrs that this transport can dial
     */
    dialFilter(multiaddrs) {
        return this.listenFilter(multiaddrs);
    }
}
export function webSockets(init = {}) {
    return (components) => {
        return new WebSockets(components, init);
    };
}
//# sourceMappingURL=index.js.map