import type { ComponentLogger, Logger, MultiaddrConnection, MultiaddrConnectionTimeline, CounterGroup } from '@libp2p/interface';
import type { AbortOptions, Multiaddr } from '@multiformats/multiaddr';
import type { Source, Sink } from 'it-stream-types';
import type { Uint8ArrayList } from 'uint8arraylist';
interface WebRTCMultiaddrConnectionInit {
    /**
     * WebRTC Peer Connection
     */
    peerConnection: RTCPeerConnection;
    /**
     * The multiaddr address used to communicate with the remote peer
     */
    remoteAddr: Multiaddr;
    /**
     * Holds the relevant events timestamps of the connection
     */
    timeline: MultiaddrConnectionTimeline;
    /**
     * Optional metrics counter group for this connection
     */
    metrics?: CounterGroup;
}
export interface WebRTCMultiaddrConnectionComponents {
    logger: ComponentLogger;
}
export declare class WebRTCMultiaddrConnection implements MultiaddrConnection {
    readonly log: Logger;
    /**
     * WebRTC Peer Connection
     */
    readonly peerConnection: RTCPeerConnection;
    /**
     * The multiaddr address used to communicate with the remote peer
     */
    remoteAddr: Multiaddr;
    /**
     * Holds the lifecycle times of the connection
     */
    timeline: MultiaddrConnectionTimeline;
    /**
     * Optional metrics counter group for this connection
     */
    metrics?: CounterGroup;
    /**
     * The stream source, a no-op as the transport natively supports multiplexing
     */
    source: AsyncGenerator<Uint8Array, any, unknown>;
    /**
     * The stream destination, a no-op as the transport natively supports multiplexing
     */
    sink: Sink<Source<Uint8Array | Uint8ArrayList>, Promise<void>>;
    constructor(components: WebRTCMultiaddrConnectionComponents, init: WebRTCMultiaddrConnectionInit);
    close(options?: AbortOptions): Promise<void>;
    abort(err: Error): void;
}
export {};
//# sourceMappingURL=maconn.d.ts.map