import { TypedEventEmitter } from '@libp2p/interface';
import type { PeerId, ListenerEvents, Listener } from '@libp2p/interface';
import type { TransportManager } from '@libp2p/interface-internal';
import type { Multiaddr } from '@multiformats/multiaddr';
export interface WebRTCPeerListenerComponents {
    peerId: PeerId;
    transportManager: TransportManager;
}
export interface WebRTCPeerListenerInit {
    shutdownController: AbortController;
}
export declare class WebRTCPeerListener extends TypedEventEmitter<ListenerEvents> implements Listener {
    private readonly peerId;
    private readonly transportManager;
    private readonly shutdownController;
    constructor(components: WebRTCPeerListenerComponents, init: WebRTCPeerListenerInit);
    listen(): Promise<void>;
    getAddrs(): Multiaddr[];
    close(): Promise<void>;
}
//# sourceMappingURL=listener.d.ts.map