import { TypedEventEmitter, peerDiscoverySymbol, serviceCapabilities } from '@libp2p/interface';
import multicastDNS from 'multicast-dns';
import type { ComponentLogger, PeerDiscovery, PeerDiscoveryEvents, Startable } from '@libp2p/interface';
import type { AddressManager } from '@libp2p/interface-internal';
export interface MulticastDNSInit {
    broadcast?: boolean;
    interval?: number;
    serviceTag?: string;
    peerName?: string;
    port?: number;
    ip?: string;
}
export interface MulticastDNSComponents {
    addressManager: AddressManager;
    logger: ComponentLogger;
}
export declare class MulticastDNS extends TypedEventEmitter<PeerDiscoveryEvents> implements PeerDiscovery, Startable {
    mdns?: multicastDNS.MulticastDNS;
    private readonly log;
    private readonly broadcast;
    private readonly interval;
    private readonly serviceTag;
    private readonly peerName;
    private readonly port;
    private readonly ip;
    private _queryInterval;
    private readonly components;
    constructor(components: MulticastDNSComponents, init?: MulticastDNSInit);
    readonly [peerDiscoverySymbol]: this;
    readonly [Symbol.toStringTag] = "@libp2p/mdns";
    readonly [serviceCapabilities]: string[];
    isStarted(): boolean;
    /**
     * Start sending queries to the LAN.
     *
     * @returns {void}
     */
    start(): Promise<void>;
    _onMdnsQuery(event: multicastDNS.QueryPacket): void;
    _onMdnsResponse(event: multicastDNS.ResponsePacket): void;
    _onMdnsWarning(err: Error): void;
    _onMdnsError(err: Error): void;
    /**
     * Stop sending queries to the LAN.
     *
     * @returns {Promise}
     */
    stop(): Promise<void>;
}
//# sourceMappingURL=mdns.d.ts.map