import type { PeerInfoMapper } from '../../index.js';
import type { Message } from '../../message/dht.js';
import type { PeerRouting } from '../../peer-routing/index.js';
import type { Providers } from '../../providers.js';
import type { DHTMessageHandler } from '../index.js';
import type { ComponentLogger, PeerId, PeerInfo, PeerStore } from '@libp2p/interface';
import type { Multiaddr } from '@multiformats/multiaddr';
export interface GetProvidersHandlerInit {
    peerRouting: PeerRouting;
    providers: Providers;
    logPrefix: string;
    peerInfoMapper: PeerInfoMapper;
}
export interface GetProvidersHandlerComponents {
    peerStore: PeerStore;
    logger: ComponentLogger;
}
export declare class GetProvidersHandler implements DHTMessageHandler {
    private readonly peerRouting;
    private readonly providers;
    private readonly peerStore;
    private readonly peerInfoMapper;
    private readonly log;
    constructor(components: GetProvidersHandlerComponents, init: GetProvidersHandlerInit);
    handle(peerId: PeerId, msg: Message): Promise<Message>;
    _getAddresses(peerId: PeerId): Promise<Multiaddr[]>;
    _getPeers(peerIds: PeerId[]): Promise<PeerInfo[]>;
}
//# sourceMappingURL=get-providers.d.ts.map