import { CodeError } from '@libp2p/interface';
import { Libp2pRecord } from '@libp2p/record';
import { verifyRecord } from '../../record/validators.js';
import { bufferToRecordKey } from '../../utils.js';
export class PutValueHandler {
    components;
    validators;
    log;
    constructor(components, init) {
        const { validators } = init;
        this.components = components;
        this.log = components.logger.forComponent(`${init.logPrefix}:rpc:handlers:put-value`);
        this.validators = validators;
    }
    async handle(peerId, msg) {
        const key = msg.key;
        this.log('%p asked us to store value for key %b', peerId, key);
        if (msg.record == null) {
            const errMsg = `Empty record from: ${peerId.toString()}`;
            this.log.error(errMsg);
            throw new CodeError(errMsg, 'ERR_EMPTY_RECORD');
        }
        try {
            const deserializedRecord = Libp2pRecord.deserialize(msg.record);
            await verifyRecord(this.validators, deserializedRecord);
            deserializedRecord.timeReceived = new Date();
            const recordKey = bufferToRecordKey(deserializedRecord.key);
            await this.components.datastore.put(recordKey, deserializedRecord.serialize().subarray());
            this.log('put record for %b into datastore under key %k', key, recordKey);
        }
        catch (err) {
            this.log('did not put record for key %b into datastore %o', key, err);
        }
        return msg;
    }
}
//# sourceMappingURL=put-value.js.map