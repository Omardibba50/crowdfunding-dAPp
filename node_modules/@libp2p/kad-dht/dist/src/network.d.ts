import { TypedEventEmitter } from '@libp2p/interface';
import { type AdaptiveTimeoutInit } from '@libp2p/utils/adaptive-timeout';
import { Message } from './message/dht.js';
import type { KadDHTComponents, QueryEvent } from './index.js';
import type { AbortOptions, Stream, PeerId, PeerInfo, Startable, RoutingOptions } from '@libp2p/interface';
export interface NetworkInit {
    protocol: string;
    logPrefix: string;
    timeout?: Omit<AdaptiveTimeoutInit, 'metricsName' | 'metrics'>;
}
interface NetworkEvents {
    'peer': CustomEvent<PeerInfo>;
}
/**
 * Handle network operations for the dht
 */
export declare class Network extends TypedEventEmitter<NetworkEvents> implements Startable {
    private readonly log;
    private readonly protocol;
    private running;
    private readonly components;
    private readonly timeout;
    /**
     * Create a new network
     */
    constructor(components: KadDHTComponents, init: NetworkInit);
    /**
     * Start the network
     */
    start(): Promise<void>;
    /**
     * Stop all network activity
     */
    stop(): Promise<void>;
    /**
     * Is the network online?
     */
    isStarted(): boolean;
    /**
     * Send a request and record RTT for latency measurements
     */
    sendRequest(to: PeerId, msg: Partial<Message>, options?: RoutingOptions): AsyncGenerator<QueryEvent>;
    /**
     * Sends a message without expecting an answer
     */
    sendMessage(to: PeerId, msg: Partial<Message>, options?: RoutingOptions): AsyncGenerator<QueryEvent>;
    /**
     * Write a message to the given stream
     */
    _writeMessage(stream: Stream, msg: Partial<Message>, options: AbortOptions): Promise<void>;
    /**
     * Write a message and read its response.
     * If no response is received after the specified timeout
     * this will error out.
     */
    _writeReadMessage(stream: Stream, msg: Partial<Message>, options: AbortOptions): Promise<Message>;
}
export {};
//# sourceMappingURL=network.d.ts.map