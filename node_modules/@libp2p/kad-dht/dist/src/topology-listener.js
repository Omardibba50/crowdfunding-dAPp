import { CustomEvent, TypedEventEmitter } from '@libp2p/interface';
/**
 * Receives notifications of new peers joining the network that support the DHT protocol
 */
export class TopologyListener extends TypedEventEmitter {
    log;
    components;
    protocol;
    running;
    registrarId;
    constructor(components, init) {
        super();
        const { protocol, logPrefix } = init;
        this.components = components;
        this.log = components.logger.forComponent(`${logPrefix}:topology-listener`);
        this.running = false;
        this.protocol = protocol;
    }
    isStarted() {
        return this.running;
    }
    /**
     * Start the network
     */
    async start() {
        if (this.running) {
            return;
        }
        this.running = true;
        // register protocol with topology
        this.registrarId = await this.components.registrar.register(this.protocol, {
            onConnect: (peerId) => {
                this.log('observed peer %p with protocol %s', peerId, this.protocol);
                this.dispatchEvent(new CustomEvent('peer', {
                    detail: peerId
                }));
            }
        });
    }
    /**
     * Stop all network activity
     */
    async stop() {
        this.running = false;
        // unregister protocol and handlers
        if (this.registrarId != null) {
            this.components.registrar.unregister(this.registrarId);
            this.registrarId = undefined;
        }
    }
}
//# sourceMappingURL=topology-listener.js.map