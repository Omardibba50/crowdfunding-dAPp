/**
 * @packageDocumentation
 *
 * This module implements the [libp2p Kademlia spec](https://github.com/libp2p/specs/blob/master/kad-dht/README.md) in TypeScript.
 *
 * The Kademlia DHT allow for several operations such as finding peers, searching for providers of DHT records, etc.
 *
 * @example Using with libp2p
 *
 * ```TypeScript
 * import { kadDHT } from '@libp2p/kad-dht'
 * import { createLibp2p } from 'libp2p'
 * import { peerIdFromString } from '@libp2p/peer-id'
 *
 * const node = await createLibp2p({
 *   services: {
 *     dht: kadDHT({
 *       // DHT options
 *     })
 *   }
 * })
 *
 * const peerId = peerIdFromString('QmFoo')
 * const peerInfo = await node.peerRouting.findPeer(peerId)
 *
 * console.info(peerInfo) // peer id, multiaddrs
 * ```
 *
 * @example Connecting to the IPFS Amino DHT
 *
 * The [Amino DHT](https://blog.ipfs.tech/2023-09-amino-refactoring/) is a public-good DHT used by IPFS to fetch content, find peers, etc.
 *
 * If you are trying to access content on the public internet, this is the implementation you want.
 *
 * ```TypeScript
 * import { kadDHT, removePrivateAddressesMapper } from '@libp2p/kad-dht'
 * import { createLibp2p } from 'libp2p'
 * import { peerIdFromString } from '@libp2p/peer-id'
 *
 * const node = await createLibp2p({
 *   services: {
 *     aminoDHT: kadDHT({
 *       protocol: '/ipfs/kad/1.0.0',
 *       peerInfoMapper: removePrivateAddressesMapper
 *     })
 *   }
 * })
 *
 * const peerId = peerIdFromString('QmFoo')
 * const peerInfo = await node.peerRouting.findPeer(peerId)
 *
 * console.info(peerInfo) // peer id, multiaddrs
 * ```
 *
 * @example Connecting to a LAN-only DHT
 *
 * This DHT only works with privately dialable peers.
 *
 * This is for use when peers are on the local area network.
 *
 * ```TypeScript
 * import { kadDHT, removePublicAddressesMapper } from '@libp2p/kad-dht'
 * import { createLibp2p } from 'libp2p'
 * import { peerIdFromString } from '@libp2p/peer-id'
 *
 * const node = await createLibp2p({
 *   services: {
 *     lanDHT: kadDHT({
 *       protocol: '/ipfs/lan/kad/1.0.0',
 *       peerInfoMapper: removePublicAddressesMapper,
 *       clientMode: false
 *     })
 *   }
 * })
 *
 * const peerId = peerIdFromString('QmFoo')
 * const peerInfo = await node.peerRouting.findPeer(peerId)
 *
 * console.info(peerInfo) // peer id, multiaddrs
 * ```
 */
import { KadDHT as KadDHTClass } from './kad-dht.js';
import { MessageType } from './message/dht.js';
import { removePrivateAddressesMapper, removePublicAddressesMapper, passthroughMapper } from './utils.js';
export { Libp2pRecord as Record } from '@libp2p/record';
export { removePrivateAddressesMapper, removePublicAddressesMapper, passthroughMapper };
/**
 * The types of events emitted during DHT queries
 */
export var EventTypes;
(function (EventTypes) {
    EventTypes[EventTypes["SEND_QUERY"] = 0] = "SEND_QUERY";
    EventTypes[EventTypes["PEER_RESPONSE"] = 1] = "PEER_RESPONSE";
    EventTypes[EventTypes["FINAL_PEER"] = 2] = "FINAL_PEER";
    EventTypes[EventTypes["QUERY_ERROR"] = 3] = "QUERY_ERROR";
    EventTypes[EventTypes["PROVIDER"] = 4] = "PROVIDER";
    EventTypes[EventTypes["VALUE"] = 5] = "VALUE";
    EventTypes[EventTypes["ADD_PEER"] = 6] = "ADD_PEER";
    EventTypes[EventTypes["DIAL_PEER"] = 7] = "DIAL_PEER";
})(EventTypes || (EventTypes = {}));
/**
 * The types of messages sent to peers during DHT queries
 */
export { MessageType };
/**
 * Creates a custom DHT implementation, please ensure you pass a `protocol`
 * string as an option.
 */
export function kadDHT(init) {
    return (components) => new KadDHTClass(components, init);
}
//# sourceMappingURL=index.js.map