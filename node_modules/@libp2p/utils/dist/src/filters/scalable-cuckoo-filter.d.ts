import { type CuckooFilterInit } from './cuckoo-filter.js';
import type { Filter } from './index.js';
export interface ScalableCuckooFilterInit extends CuckooFilterInit {
    /**
     * A number to multiply maxItems by when adding new sub-filters
     */
    scale?: number;
}
export declare class ScalableCuckooFilter implements Filter {
    private readonly filterSize;
    private readonly bucketSize;
    private readonly fingerprintSize;
    private readonly scale;
    private readonly filterSeries;
    private readonly hash;
    private readonly seed;
    constructor(init: ScalableCuckooFilterInit);
    add(item: Uint8Array | string): boolean;
    has(item: Uint8Array | string): boolean;
    remove(item: Uint8Array | string): boolean;
    get count(): number;
}
export declare function createScalableCuckooFilter(maxItems: number, errorRate?: number, options?: Pick<ScalableCuckooFilterInit, 'hash' | 'seed' | 'scale'>): Filter;
//# sourceMappingURL=scalable-cuckoo-filter.d.ts.map