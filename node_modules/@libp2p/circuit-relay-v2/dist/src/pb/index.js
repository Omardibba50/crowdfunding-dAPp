/* eslint-disable import/export */
/* eslint-disable complexity */
/* eslint-disable @typescript-eslint/no-namespace */
/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { CodeError, decodeMessage, encodeMessage, enumeration, message } from 'protons-runtime';
import { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc';
export var HopMessage;
(function (HopMessage) {
    let Type;
    (function (Type) {
        Type["RESERVE"] = "RESERVE";
        Type["CONNECT"] = "CONNECT";
        Type["STATUS"] = "STATUS";
    })(Type = HopMessage.Type || (HopMessage.Type = {}));
    let __TypeValues;
    (function (__TypeValues) {
        __TypeValues[__TypeValues["RESERVE"] = 0] = "RESERVE";
        __TypeValues[__TypeValues["CONNECT"] = 1] = "CONNECT";
        __TypeValues[__TypeValues["STATUS"] = 2] = "STATUS";
    })(__TypeValues || (__TypeValues = {}));
    (function (Type) {
        Type.codec = () => {
            return enumeration(__TypeValues);
        };
    })(Type = HopMessage.Type || (HopMessage.Type = {}));
    let _codec;
    HopMessage.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.type != null) {
                    w.uint32(8);
                    HopMessage.Type.codec().encode(obj.type, w);
                }
                if (obj.peer != null) {
                    w.uint32(18);
                    Peer.codec().encode(obj.peer, w);
                }
                if (obj.reservation != null) {
                    w.uint32(26);
                    Reservation.codec().encode(obj.reservation, w);
                }
                if (obj.limit != null) {
                    w.uint32(34);
                    Limit.codec().encode(obj.limit, w);
                }
                if (obj.status != null) {
                    w.uint32(40);
                    Status.codec().encode(obj.status, w);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length, opts = {}) => {
                const obj = {};
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1: {
                            obj.type = HopMessage.Type.codec().decode(reader);
                            break;
                        }
                        case 2: {
                            obj.peer = Peer.codec().decode(reader, reader.uint32(), {
                                limits: opts.limits?.peer
                            });
                            break;
                        }
                        case 3: {
                            obj.reservation = Reservation.codec().decode(reader, reader.uint32(), {
                                limits: opts.limits?.reservation
                            });
                            break;
                        }
                        case 4: {
                            obj.limit = Limit.codec().decode(reader, reader.uint32(), {
                                limits: opts.limits?.limit
                            });
                            break;
                        }
                        case 5: {
                            obj.status = Status.codec().decode(reader);
                            break;
                        }
                        default: {
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    HopMessage.encode = (obj) => {
        return encodeMessage(obj, HopMessage.codec());
    };
    HopMessage.decode = (buf, opts) => {
        return decodeMessage(buf, HopMessage.codec(), opts);
    };
})(HopMessage || (HopMessage = {}));
export var StopMessage;
(function (StopMessage) {
    let Type;
    (function (Type) {
        Type["CONNECT"] = "CONNECT";
        Type["STATUS"] = "STATUS";
    })(Type = StopMessage.Type || (StopMessage.Type = {}));
    let __TypeValues;
    (function (__TypeValues) {
        __TypeValues[__TypeValues["CONNECT"] = 0] = "CONNECT";
        __TypeValues[__TypeValues["STATUS"] = 1] = "STATUS";
    })(__TypeValues || (__TypeValues = {}));
    (function (Type) {
        Type.codec = () => {
            return enumeration(__TypeValues);
        };
    })(Type = StopMessage.Type || (StopMessage.Type = {}));
    let _codec;
    StopMessage.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.type != null) {
                    w.uint32(8);
                    StopMessage.Type.codec().encode(obj.type, w);
                }
                if (obj.peer != null) {
                    w.uint32(18);
                    Peer.codec().encode(obj.peer, w);
                }
                if (obj.limit != null) {
                    w.uint32(26);
                    Limit.codec().encode(obj.limit, w);
                }
                if (obj.status != null) {
                    w.uint32(32);
                    Status.codec().encode(obj.status, w);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length, opts = {}) => {
                const obj = {};
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1: {
                            obj.type = StopMessage.Type.codec().decode(reader);
                            break;
                        }
                        case 2: {
                            obj.peer = Peer.codec().decode(reader, reader.uint32(), {
                                limits: opts.limits?.peer
                            });
                            break;
                        }
                        case 3: {
                            obj.limit = Limit.codec().decode(reader, reader.uint32(), {
                                limits: opts.limits?.limit
                            });
                            break;
                        }
                        case 4: {
                            obj.status = Status.codec().decode(reader);
                            break;
                        }
                        default: {
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    StopMessage.encode = (obj) => {
        return encodeMessage(obj, StopMessage.codec());
    };
    StopMessage.decode = (buf, opts) => {
        return decodeMessage(buf, StopMessage.codec(), opts);
    };
})(StopMessage || (StopMessage = {}));
export var Peer;
(function (Peer) {
    let _codec;
    Peer.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if ((obj.id != null && obj.id.byteLength > 0)) {
                    w.uint32(10);
                    w.bytes(obj.id);
                }
                if (obj.addrs != null) {
                    for (const value of obj.addrs) {
                        w.uint32(18);
                        w.bytes(value);
                    }
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length, opts = {}) => {
                const obj = {
                    id: uint8ArrayAlloc(0),
                    addrs: []
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1: {
                            obj.id = reader.bytes();
                            break;
                        }
                        case 2: {
                            if (opts.limits?.addrs != null && obj.addrs.length === opts.limits.addrs) {
                                throw new CodeError('decode error - map field "addrs" had too many elements', 'ERR_MAX_LENGTH');
                            }
                            obj.addrs.push(reader.bytes());
                            break;
                        }
                        default: {
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    Peer.encode = (obj) => {
        return encodeMessage(obj, Peer.codec());
    };
    Peer.decode = (buf, opts) => {
        return decodeMessage(buf, Peer.codec(), opts);
    };
})(Peer || (Peer = {}));
export var Reservation;
(function (Reservation) {
    let _codec;
    Reservation.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if ((obj.expire != null && obj.expire !== 0n)) {
                    w.uint32(8);
                    w.uint64(obj.expire);
                }
                if (obj.addrs != null) {
                    for (const value of obj.addrs) {
                        w.uint32(18);
                        w.bytes(value);
                    }
                }
                if (obj.voucher != null) {
                    w.uint32(26);
                    w.bytes(obj.voucher);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length, opts = {}) => {
                const obj = {
                    expire: 0n,
                    addrs: []
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1: {
                            obj.expire = reader.uint64();
                            break;
                        }
                        case 2: {
                            if (opts.limits?.addrs != null && obj.addrs.length === opts.limits.addrs) {
                                throw new CodeError('decode error - map field "addrs" had too many elements', 'ERR_MAX_LENGTH');
                            }
                            obj.addrs.push(reader.bytes());
                            break;
                        }
                        case 3: {
                            obj.voucher = reader.bytes();
                            break;
                        }
                        default: {
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    Reservation.encode = (obj) => {
        return encodeMessage(obj, Reservation.codec());
    };
    Reservation.decode = (buf, opts) => {
        return decodeMessage(buf, Reservation.codec(), opts);
    };
})(Reservation || (Reservation = {}));
export var Limit;
(function (Limit) {
    let _codec;
    Limit.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.duration != null) {
                    w.uint32(8);
                    w.uint32(obj.duration);
                }
                if (obj.data != null) {
                    w.uint32(16);
                    w.uint64(obj.data);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length, opts = {}) => {
                const obj = {};
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1: {
                            obj.duration = reader.uint32();
                            break;
                        }
                        case 2: {
                            obj.data = reader.uint64();
                            break;
                        }
                        default: {
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    Limit.encode = (obj) => {
        return encodeMessage(obj, Limit.codec());
    };
    Limit.decode = (buf, opts) => {
        return decodeMessage(buf, Limit.codec(), opts);
    };
})(Limit || (Limit = {}));
export var Status;
(function (Status) {
    Status["UNUSED"] = "UNUSED";
    Status["OK"] = "OK";
    Status["RESERVATION_REFUSED"] = "RESERVATION_REFUSED";
    Status["RESOURCE_LIMIT_EXCEEDED"] = "RESOURCE_LIMIT_EXCEEDED";
    Status["PERMISSION_DENIED"] = "PERMISSION_DENIED";
    Status["CONNECTION_FAILED"] = "CONNECTION_FAILED";
    Status["NO_RESERVATION"] = "NO_RESERVATION";
    Status["MALFORMED_MESSAGE"] = "MALFORMED_MESSAGE";
    Status["UNEXPECTED_MESSAGE"] = "UNEXPECTED_MESSAGE";
})(Status || (Status = {}));
var __StatusValues;
(function (__StatusValues) {
    __StatusValues[__StatusValues["UNUSED"] = 0] = "UNUSED";
    __StatusValues[__StatusValues["OK"] = 100] = "OK";
    __StatusValues[__StatusValues["RESERVATION_REFUSED"] = 200] = "RESERVATION_REFUSED";
    __StatusValues[__StatusValues["RESOURCE_LIMIT_EXCEEDED"] = 201] = "RESOURCE_LIMIT_EXCEEDED";
    __StatusValues[__StatusValues["PERMISSION_DENIED"] = 202] = "PERMISSION_DENIED";
    __StatusValues[__StatusValues["CONNECTION_FAILED"] = 203] = "CONNECTION_FAILED";
    __StatusValues[__StatusValues["NO_RESERVATION"] = 204] = "NO_RESERVATION";
    __StatusValues[__StatusValues["MALFORMED_MESSAGE"] = 400] = "MALFORMED_MESSAGE";
    __StatusValues[__StatusValues["UNEXPECTED_MESSAGE"] = 401] = "UNEXPECTED_MESSAGE";
})(__StatusValues || (__StatusValues = {}));
(function (Status) {
    Status.codec = () => {
        return enumeration(__StatusValues);
    };
})(Status || (Status = {}));
export var ReservationVoucher;
(function (ReservationVoucher) {
    let _codec;
    ReservationVoucher.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if ((obj.relay != null && obj.relay.byteLength > 0)) {
                    w.uint32(10);
                    w.bytes(obj.relay);
                }
                if ((obj.peer != null && obj.peer.byteLength > 0)) {
                    w.uint32(18);
                    w.bytes(obj.peer);
                }
                if ((obj.expiration != null && obj.expiration !== 0n)) {
                    w.uint32(24);
                    w.uint64(obj.expiration);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length, opts = {}) => {
                const obj = {
                    relay: uint8ArrayAlloc(0),
                    peer: uint8ArrayAlloc(0),
                    expiration: 0n
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1: {
                            obj.relay = reader.bytes();
                            break;
                        }
                        case 2: {
                            obj.peer = reader.bytes();
                            break;
                        }
                        case 3: {
                            obj.expiration = reader.uint64();
                            break;
                        }
                        default: {
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    ReservationVoucher.encode = (obj) => {
        return encodeMessage(obj, ReservationVoucher.codec());
    };
    ReservationVoucher.decode = (buf, opts) => {
        return decodeMessage(buf, ReservationVoucher.codec(), opts);
    };
})(ReservationVoucher || (ReservationVoucher = {}));
//# sourceMappingURL=index.js.map