/**
 * @packageDocumentation
 *
 * A [libp2p transport](https://docs.libp2p.io/concepts/transports/overview/) based on [WebTransport](https://www.w3.org/TR/webtransport/).
 *
 * >
 * > ⚠️ **Note**
 * >
 * > This WebTransport implementation currently only allows dialing to other nodes. It does not yet allow listening for incoming dials. This feature requires QUIC support to land in Node JS first.
 * >
 * > QUIC support in Node JS is actively being worked on. You can keep an eye on the progress by watching the [related issues on the Node JS issue tracker](https://github.com/nodejs/node/labels/quic)
 * >
 *
 * @example
 *
 * ```TypeScript
 * import { createLibp2p } from 'libp2p'
 * import { webTransport } from '@libp2p/webtransport'
 * import { noise } from '@chainsafe/libp2p-noise'
 *
 * const node = await createLibp2p({
 *   transports: [
 *     webTransport()
 *   ],
 *   connectionEncryption: [
 *     noise()
 *   ]
 * })
 * ```
 */
import type { Transport, ComponentLogger, CounterGroup, Metrics, PeerId, OutboundConnectionUpgradeEvents } from '@libp2p/interface';
import type { MultihashDigest } from 'multiformats/hashes/interface';
import type { ProgressEvent } from 'progress-events';
/**
 * PEM format server certificate and private key
 */
export interface WebTransportCertificate {
    privateKey: string;
    pem: string;
    hash: MultihashDigest<number>;
    secret: string;
}
export interface WebTransportInit {
    maxInboundStreams?: number;
    certificates?: WebTransportCertificate[];
}
export interface WebTransportComponents {
    peerId: PeerId;
    metrics?: Metrics;
    logger: ComponentLogger;
}
export interface WebTransportMetrics {
    dialerEvents: CounterGroup;
}
export type WebTransportDialEvents = OutboundConnectionUpgradeEvents | ProgressEvent<'webtransport:wait-for-session'> | ProgressEvent<'webtransport:open-authentication-stream'> | ProgressEvent<'webtransport:secure-outbound-connection'> | ProgressEvent<'webtransport:close-authentication-stream'>;
export declare function webTransport(init?: WebTransportInit): (components: WebTransportComponents) => Transport;
//# sourceMappingURL=index.d.ts.map