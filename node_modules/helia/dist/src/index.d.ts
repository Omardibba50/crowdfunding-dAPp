/**
 * @packageDocumentation
 *
 * Exports a `createHelia` function that returns an object that implements the {@link Helia} API.
 *
 * Pass it to other modules like {@link https://www.npmjs.com/package/@helia/unixfs | @helia/unixfs} to make files available on the distributed web.
 *
 * @example
 *
 * ```typescript
 * import { createHelia } from 'helia'
 * import { unixfs } from '@helia/unixfs'
 * import { CID } from 'multiformats/cid'
 *
 * const helia = await createHelia()
 *
 * const fs = unixfs(helia)
 * fs.cat(CID.parse('bafyFoo'))
 * ```
 */
import { libp2pDefaults } from './utils/libp2p-defaults.js';
import type { DefaultLibp2pServices } from './utils/libp2p-defaults.js';
import type { Helia } from '@helia/interface';
import type { HeliaInit as HeliaClassInit } from '@helia/utils';
import type { Libp2p } from '@libp2p/interface';
import type { KeychainInit } from '@libp2p/keychain';
import type { Libp2pOptions } from 'libp2p';
import type { CID } from 'multiformats/cid';
export * from '@helia/interface';
export type { DefaultLibp2pServices };
export { libp2pDefaults };
/**
 * DAGWalkers take a block and yield CIDs encoded in that block
 */
export interface DAGWalker {
    codec: number;
    walk(block: Uint8Array): Generator<CID, void, undefined>;
}
/**
 * Options used to create a Helia node.
 */
export interface HeliaInit<T extends Libp2p = Libp2p> extends HeliaClassInit {
    /**
     * A libp2p node is required to perform network operations. Either a
     * preconfigured node or options to configure a node can be passed
     * here.
     *
     * If node options are passed, they will be merged with the default
     * config for the current platform. In this case all passed config
     * keys will replace those from the default config.
     *
     * The libp2p `start` option is not supported, instead please pass `start` in
     * the root of the HeliaInit object.
     */
    libp2p?: T | Omit<Libp2pOptions, 'start'>;
    /**
     * Pass `false` to not start the Helia node
     */
    start?: boolean;
    /**
     * By default Helia stores the node's PeerId in an encrypted form in a
     * libp2p keystore. These options control how that keystore is configured.
     */
    keychain?: KeychainInit;
}
export interface HeliaLibp2p<T extends Libp2p = Libp2p<DefaultLibp2pServices>> extends Helia {
    libp2p: T;
}
/**
 * Create and return a Helia node
 */
export declare function createHelia<T extends Libp2p>(init: Partial<HeliaInit<T>>): Promise<HeliaLibp2p<T>>;
export declare function createHelia(init?: Partial<HeliaInit<Libp2p<DefaultLibp2pServices>>>): Promise<HeliaLibp2p<Libp2p<DefaultLibp2pServices>>>;
//# sourceMappingURL=index.d.ts.map